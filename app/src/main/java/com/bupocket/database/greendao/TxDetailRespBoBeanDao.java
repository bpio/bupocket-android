package com.bupocket.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bupocket.model.TxDetailRespBoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TX_DETAIL_RESP_BO_BEAN".
*/
public class TxDetailRespBoBeanDao extends AbstractDao<TxDetailRespBoBean, Void> {

    public static final String TABLENAME = "TX_DETAIL_RESP_BO_BEAN";

    /**
     * Properties of entity TxDetailRespBoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Address = new Property(0, String.class, "address", false, "ADDRESS");
        public final static Property OptNo = new Property(1, String.class, "optNo", false, "OPT_NO");
        public final static Property Amount = new Property(2, String.class, "amount", false, "AMOUNT");
        public final static Property ApplyTimeDate = new Property(3, String.class, "applyTimeDate", false, "APPLY_TIME_DATE");
        public final static Property DestAddress = new Property(4, String.class, "destAddress", false, "DEST_ADDRESS");
        public final static Property Fee = new Property(5, String.class, "fee", false, "FEE");
        public final static Property SourceAddress = new Property(6, String.class, "sourceAddress", false, "SOURCE_ADDRESS");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
        public final static Property OriginalMetadata = new Property(8, String.class, "originalMetadata", false, "ORIGINAL_METADATA");
        public final static Property TxMetadata = new Property(9, String.class, "txMetadata", false, "TX_METADATA");
        public final static Property OperaMetadata = new Property(10, String.class, "operaMetadata", false, "OPERA_METADATA");
        public final static Property ErrorMsg = new Property(11, String.class, "errorMsg", false, "ERROR_MSG");
        public final static Property ErrorCode = new Property(12, String.class, "errorCode", false, "ERROR_CODE");
    }


    public TxDetailRespBoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TxDetailRespBoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TX_DETAIL_RESP_BO_BEAN\" (" + //
                "\"ADDRESS\" TEXT," + // 0: address
                "\"OPT_NO\" TEXT," + // 1: optNo
                "\"AMOUNT\" TEXT," + // 2: amount
                "\"APPLY_TIME_DATE\" TEXT," + // 3: applyTimeDate
                "\"DEST_ADDRESS\" TEXT," + // 4: destAddress
                "\"FEE\" TEXT," + // 5: fee
                "\"SOURCE_ADDRESS\" TEXT," + // 6: sourceAddress
                "\"STATUS\" INTEGER," + // 7: status
                "\"ORIGINAL_METADATA\" TEXT," + // 8: originalMetadata
                "\"TX_METADATA\" TEXT," + // 9: txMetadata
                "\"OPERA_METADATA\" TEXT," + // 10: operaMetadata
                "\"ERROR_MSG\" TEXT," + // 11: errorMsg
                "\"ERROR_CODE\" TEXT);"); // 12: errorCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TX_DETAIL_RESP_BO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TxDetailRespBoBean entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String optNo = entity.getOptNo();
        if (optNo != null) {
            stmt.bindString(2, optNo);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(3, amount);
        }
 
        String applyTimeDate = entity.getApplyTimeDate();
        if (applyTimeDate != null) {
            stmt.bindString(4, applyTimeDate);
        }
 
        String destAddress = entity.getDestAddress();
        if (destAddress != null) {
            stmt.bindString(5, destAddress);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(6, fee);
        }
 
        String sourceAddress = entity.getSourceAddress();
        if (sourceAddress != null) {
            stmt.bindString(7, sourceAddress);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
 
        String originalMetadata = entity.getOriginalMetadata();
        if (originalMetadata != null) {
            stmt.bindString(9, originalMetadata);
        }
 
        String txMetadata = entity.getTxMetadata();
        if (txMetadata != null) {
            stmt.bindString(10, txMetadata);
        }
 
        String operaMetadata = entity.getOperaMetadata();
        if (operaMetadata != null) {
            stmt.bindString(11, operaMetadata);
        }
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(12, errorMsg);
        }
 
        String errorCode = entity.getErrorCode();
        if (errorCode != null) {
            stmt.bindString(13, errorCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TxDetailRespBoBean entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String optNo = entity.getOptNo();
        if (optNo != null) {
            stmt.bindString(2, optNo);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(3, amount);
        }
 
        String applyTimeDate = entity.getApplyTimeDate();
        if (applyTimeDate != null) {
            stmt.bindString(4, applyTimeDate);
        }
 
        String destAddress = entity.getDestAddress();
        if (destAddress != null) {
            stmt.bindString(5, destAddress);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(6, fee);
        }
 
        String sourceAddress = entity.getSourceAddress();
        if (sourceAddress != null) {
            stmt.bindString(7, sourceAddress);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
 
        String originalMetadata = entity.getOriginalMetadata();
        if (originalMetadata != null) {
            stmt.bindString(9, originalMetadata);
        }
 
        String txMetadata = entity.getTxMetadata();
        if (txMetadata != null) {
            stmt.bindString(10, txMetadata);
        }
 
        String operaMetadata = entity.getOperaMetadata();
        if (operaMetadata != null) {
            stmt.bindString(11, operaMetadata);
        }
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(12, errorMsg);
        }
 
        String errorCode = entity.getErrorCode();
        if (errorCode != null) {
            stmt.bindString(13, errorCode);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TxDetailRespBoBean readEntity(Cursor cursor, int offset) {
        TxDetailRespBoBean entity = new TxDetailRespBoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // address
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // optNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // amount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // applyTimeDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // destAddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fee
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sourceAddress
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // originalMetadata
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // txMetadata
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // operaMetadata
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // errorMsg
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // errorCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TxDetailRespBoBean entity, int offset) {
        entity.setAddress(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOptNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAmount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApplyTimeDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDestAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFee(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSourceAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setOriginalMetadata(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTxMetadata(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOperaMetadata(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setErrorMsg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setErrorCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TxDetailRespBoBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TxDetailRespBoBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(TxDetailRespBoBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
