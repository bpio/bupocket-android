package com.bupocket.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bupocket.model.LogListModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOG_LIST_MODEL".
*/
public class LogListModelDao extends AbstractDao<LogListModel, String> {

    public static final String TABLENAME = "LOG_LIST_MODEL";

    /**
     * Properties of entity LogListModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CreateTime = new Property(0, String.class, "createTime", true, "CREATE_TIME");
        public final static Property EnglishVerContents = new Property(1, String.class, "englishVerContents", false, "ENGLISH_VER_CONTENTS");
        public final static Property VerContents = new Property(2, String.class, "verContents", false, "VER_CONTENTS");
        public final static Property VerNumber = new Property(3, String.class, "verNumber", false, "VER_NUMBER");
    }


    public LogListModelDao(DaoConfig config) {
        super(config);
    }
    
    public LogListModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOG_LIST_MODEL\" (" + //
                "\"CREATE_TIME\" TEXT PRIMARY KEY NOT NULL ," + // 0: createTime
                "\"ENGLISH_VER_CONTENTS\" TEXT," + // 1: englishVerContents
                "\"VER_CONTENTS\" TEXT," + // 2: verContents
                "\"VER_NUMBER\" TEXT);"); // 3: verNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOG_LIST_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LogListModel entity) {
        stmt.clearBindings();
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(1, createTime);
        }
 
        String englishVerContents = entity.getEnglishVerContents();
        if (englishVerContents != null) {
            stmt.bindString(2, englishVerContents);
        }
 
        String verContents = entity.getVerContents();
        if (verContents != null) {
            stmt.bindString(3, verContents);
        }
 
        String verNumber = entity.getVerNumber();
        if (verNumber != null) {
            stmt.bindString(4, verNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LogListModel entity) {
        stmt.clearBindings();
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(1, createTime);
        }
 
        String englishVerContents = entity.getEnglishVerContents();
        if (englishVerContents != null) {
            stmt.bindString(2, englishVerContents);
        }
 
        String verContents = entity.getVerContents();
        if (verContents != null) {
            stmt.bindString(3, verContents);
        }
 
        String verNumber = entity.getVerNumber();
        if (verNumber != null) {
            stmt.bindString(4, verNumber);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LogListModel readEntity(Cursor cursor, int offset) {
        LogListModel entity = new LogListModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // createTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // englishVerContents
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // verContents
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // verNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LogListModel entity, int offset) {
        entity.setCreateTime(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEnglishVerContents(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVerContents(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVerNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LogListModel entity, long rowId) {
        return entity.getCreateTime();
    }
    
    @Override
    public String getKey(LogListModel entity) {
        if(entity != null) {
            return entity.getCreateTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LogListModel entity) {
        return entity.getCreateTime() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
