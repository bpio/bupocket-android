package com.bupocket.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bupocket.model.SuperNodeModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUPER_NODE_MODEL".
*/
public class SuperNodeModelDao extends AbstractDao<SuperNodeModel, String> {

    public static final String TABLENAME = "SUPER_NODE_MODEL";

    /**
     * Properties of entity SuperNodeModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NodeId = new Property(0, String.class, "nodeId", true, "NODE_ID");
        public final static Property NodeName = new Property(1, String.class, "nodeName", false, "NODE_NAME");
        public final static Property NodeLogo = new Property(2, String.class, "nodeLogo", false, "NODE_LOGO");
        public final static Property NodeCapitalAddress = new Property(3, String.class, "nodeCapitalAddress", false, "NODE_CAPITAL_ADDRESS");
        public final static Property IdentityType = new Property(4, String.class, "identityType", false, "IDENTITY_TYPE");
        public final static Property IdentityStatus = new Property(5, String.class, "identityStatus", false, "IDENTITY_STATUS");
        public final static Property NodeVote = new Property(6, String.class, "nodeVote", false, "NODE_VOTE");
        public final static Property MyVoteCount = new Property(7, String.class, "myVoteCount", false, "MY_VOTE_COUNT");
        public final static Property Introduce = new Property(8, String.class, "introduce", false, "INTRODUCE");
        public final static Property Support = new Property(9, String.class, "support", false, "SUPPORT");
        public final static Property ShareStartTime = new Property(10, String.class, "shareStartTime", false, "SHARE_START_TIME");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
        public final static Property Slogan = new Property(12, String.class, "slogan", false, "SLOGAN");
    }


    public SuperNodeModelDao(DaoConfig config) {
        super(config);
    }
    
    public SuperNodeModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUPER_NODE_MODEL\" (" + //
                "\"NODE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: nodeId
                "\"NODE_NAME\" TEXT," + // 1: nodeName
                "\"NODE_LOGO\" TEXT," + // 2: nodeLogo
                "\"NODE_CAPITAL_ADDRESS\" TEXT," + // 3: nodeCapitalAddress
                "\"IDENTITY_TYPE\" TEXT," + // 4: identityType
                "\"IDENTITY_STATUS\" TEXT," + // 5: identityStatus
                "\"NODE_VOTE\" TEXT," + // 6: nodeVote
                "\"MY_VOTE_COUNT\" TEXT," + // 7: myVoteCount
                "\"INTRODUCE\" TEXT," + // 8: introduce
                "\"SUPPORT\" TEXT," + // 9: support
                "\"SHARE_START_TIME\" TEXT," + // 10: shareStartTime
                "\"STATUS\" TEXT," + // 11: status
                "\"SLOGAN\" TEXT);"); // 12: slogan
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUPER_NODE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SuperNodeModel entity) {
        stmt.clearBindings();
 
        String nodeId = entity.getNodeId();
        if (nodeId != null) {
            stmt.bindString(1, nodeId);
        }
 
        String nodeName = entity.getNodeName();
        if (nodeName != null) {
            stmt.bindString(2, nodeName);
        }
 
        String nodeLogo = entity.getNodeLogo();
        if (nodeLogo != null) {
            stmt.bindString(3, nodeLogo);
        }
 
        String nodeCapitalAddress = entity.getNodeCapitalAddress();
        if (nodeCapitalAddress != null) {
            stmt.bindString(4, nodeCapitalAddress);
        }
 
        String identityType = entity.getIdentityType();
        if (identityType != null) {
            stmt.bindString(5, identityType);
        }
 
        String identityStatus = entity.getIdentityStatus();
        if (identityStatus != null) {
            stmt.bindString(6, identityStatus);
        }
 
        String nodeVote = entity.getNodeVote();
        if (nodeVote != null) {
            stmt.bindString(7, nodeVote);
        }
 
        String myVoteCount = entity.getMyVoteCount();
        if (myVoteCount != null) {
            stmt.bindString(8, myVoteCount);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(9, introduce);
        }
 
        String support = entity.getSupport();
        if (support != null) {
            stmt.bindString(10, support);
        }
 
        String shareStartTime = entity.getShareStartTime();
        if (shareStartTime != null) {
            stmt.bindString(11, shareStartTime);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        String slogan = entity.getSlogan();
        if (slogan != null) {
            stmt.bindString(13, slogan);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SuperNodeModel entity) {
        stmt.clearBindings();
 
        String nodeId = entity.getNodeId();
        if (nodeId != null) {
            stmt.bindString(1, nodeId);
        }
 
        String nodeName = entity.getNodeName();
        if (nodeName != null) {
            stmt.bindString(2, nodeName);
        }
 
        String nodeLogo = entity.getNodeLogo();
        if (nodeLogo != null) {
            stmt.bindString(3, nodeLogo);
        }
 
        String nodeCapitalAddress = entity.getNodeCapitalAddress();
        if (nodeCapitalAddress != null) {
            stmt.bindString(4, nodeCapitalAddress);
        }
 
        String identityType = entity.getIdentityType();
        if (identityType != null) {
            stmt.bindString(5, identityType);
        }
 
        String identityStatus = entity.getIdentityStatus();
        if (identityStatus != null) {
            stmt.bindString(6, identityStatus);
        }
 
        String nodeVote = entity.getNodeVote();
        if (nodeVote != null) {
            stmt.bindString(7, nodeVote);
        }
 
        String myVoteCount = entity.getMyVoteCount();
        if (myVoteCount != null) {
            stmt.bindString(8, myVoteCount);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(9, introduce);
        }
 
        String support = entity.getSupport();
        if (support != null) {
            stmt.bindString(10, support);
        }
 
        String shareStartTime = entity.getShareStartTime();
        if (shareStartTime != null) {
            stmt.bindString(11, shareStartTime);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        String slogan = entity.getSlogan();
        if (slogan != null) {
            stmt.bindString(13, slogan);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SuperNodeModel readEntity(Cursor cursor, int offset) {
        SuperNodeModel entity = new SuperNodeModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nodeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nodeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nodeLogo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nodeCapitalAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // identityType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // identityStatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nodeVote
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // myVoteCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // introduce
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // support
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // shareStartTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // slogan
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SuperNodeModel entity, int offset) {
        entity.setNodeId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNodeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNodeLogo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNodeCapitalAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdentityType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdentityStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNodeVote(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMyVoteCount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIntroduce(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSupport(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShareStartTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSlogan(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SuperNodeModel entity, long rowId) {
        return entity.getNodeId();
    }
    
    @Override
    public String getKey(SuperNodeModel entity) {
        if(entity != null) {
            return entity.getNodeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SuperNodeModel entity) {
        return entity.getNodeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
