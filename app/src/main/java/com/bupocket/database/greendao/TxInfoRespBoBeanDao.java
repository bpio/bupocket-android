package com.bupocket.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bupocket.model.TxInfoRespBoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TX_INFO_RESP_BO_BEAN".
*/
public class TxInfoRespBoBeanDao extends AbstractDao<TxInfoRespBoBean, Void> {

    public static final String TABLENAME = "TX_INFO_RESP_BO_BEAN";

    /**
     * Properties of entity TxInfoRespBoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Address = new Property(0, String.class, "address", false, "ADDRESS");
        public final static Property OptNo = new Property(1, String.class, "optNo", false, "OPT_NO");
        public final static Property Amount = new Property(2, String.class, "amount", false, "AMOUNT");
        public final static Property DestAddress = new Property(3, String.class, "destAddress", false, "DEST_ADDRESS");
        public final static Property Fee = new Property(4, String.class, "fee", false, "FEE");
        public final static Property Hash = new Property(5, String.class, "hash", false, "HASH");
        public final static Property LedgerSeq = new Property(6, int.class, "ledgerSeq", false, "LEDGER_SEQ");
        public final static Property Nonce = new Property(7, int.class, "nonce", false, "NONCE");
        public final static Property SignatureStr = new Property(8, String.class, "signatureStr", false, "SIGNATURE_STR");
        public final static Property SourceAddress = new Property(9, String.class, "sourceAddress", false, "SOURCE_ADDRESS");
    }


    public TxInfoRespBoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TxInfoRespBoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TX_INFO_RESP_BO_BEAN\" (" + //
                "\"ADDRESS\" TEXT," + // 0: address
                "\"OPT_NO\" TEXT," + // 1: optNo
                "\"AMOUNT\" TEXT," + // 2: amount
                "\"DEST_ADDRESS\" TEXT," + // 3: destAddress
                "\"FEE\" TEXT," + // 4: fee
                "\"HASH\" TEXT," + // 5: hash
                "\"LEDGER_SEQ\" INTEGER NOT NULL ," + // 6: ledgerSeq
                "\"NONCE\" INTEGER NOT NULL ," + // 7: nonce
                "\"SIGNATURE_STR\" TEXT," + // 8: signatureStr
                "\"SOURCE_ADDRESS\" TEXT);"); // 9: sourceAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TX_INFO_RESP_BO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TxInfoRespBoBean entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String optNo = entity.getOptNo();
        if (optNo != null) {
            stmt.bindString(2, optNo);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(3, amount);
        }
 
        String destAddress = entity.getDestAddress();
        if (destAddress != null) {
            stmt.bindString(4, destAddress);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(5, fee);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(6, hash);
        }
        stmt.bindLong(7, entity.getLedgerSeq());
        stmt.bindLong(8, entity.getNonce());
 
        String signatureStr = entity.getSignatureStr();
        if (signatureStr != null) {
            stmt.bindString(9, signatureStr);
        }
 
        String sourceAddress = entity.getSourceAddress();
        if (sourceAddress != null) {
            stmt.bindString(10, sourceAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TxInfoRespBoBean entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String optNo = entity.getOptNo();
        if (optNo != null) {
            stmt.bindString(2, optNo);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(3, amount);
        }
 
        String destAddress = entity.getDestAddress();
        if (destAddress != null) {
            stmt.bindString(4, destAddress);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(5, fee);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(6, hash);
        }
        stmt.bindLong(7, entity.getLedgerSeq());
        stmt.bindLong(8, entity.getNonce());
 
        String signatureStr = entity.getSignatureStr();
        if (signatureStr != null) {
            stmt.bindString(9, signatureStr);
        }
 
        String sourceAddress = entity.getSourceAddress();
        if (sourceAddress != null) {
            stmt.bindString(10, sourceAddress);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TxInfoRespBoBean readEntity(Cursor cursor, int offset) {
        TxInfoRespBoBean entity = new TxInfoRespBoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // address
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // optNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // amount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // destAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fee
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hash
            cursor.getInt(offset + 6), // ledgerSeq
            cursor.getInt(offset + 7), // nonce
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // signatureStr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // sourceAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TxInfoRespBoBean entity, int offset) {
        entity.setAddress(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOptNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAmount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDestAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFee(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHash(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLedgerSeq(cursor.getInt(offset + 6));
        entity.setNonce(cursor.getInt(offset + 7));
        entity.setSignatureStr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSourceAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TxInfoRespBoBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TxInfoRespBoBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(TxInfoRespBoBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
