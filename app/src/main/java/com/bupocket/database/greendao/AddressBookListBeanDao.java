package com.bupocket.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bupocket.http.api.AddressBookListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADDRESS_BOOK_LIST_BEAN".
*/
public class AddressBookListBeanDao extends AbstractDao<AddressBookListBean, String> {

    public static final String TABLENAME = "ADDRESS_BOOK_LIST_BEAN";

    /**
     * Properties of entity AddressBookListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NickName = new Property(0, String.class, "nickName", false, "NICK_NAME");
        public final static Property LinkmanAddress = new Property(1, String.class, "linkmanAddress", true, "LINKMAN_ADDRESS");
        public final static Property Remark = new Property(2, String.class, "remark", false, "REMARK");
    }


    public AddressBookListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AddressBookListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADDRESS_BOOK_LIST_BEAN\" (" + //
                "\"NICK_NAME\" TEXT," + // 0: nickName
                "\"LINKMAN_ADDRESS\" TEXT PRIMARY KEY NOT NULL ," + // 1: linkmanAddress
                "\"REMARK\" TEXT);"); // 2: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADDRESS_BOOK_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AddressBookListBean entity) {
        stmt.clearBindings();
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(1, nickName);
        }
 
        String linkmanAddress = entity.getLinkmanAddress();
        if (linkmanAddress != null) {
            stmt.bindString(2, linkmanAddress);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AddressBookListBean entity) {
        stmt.clearBindings();
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(1, nickName);
        }
 
        String linkmanAddress = entity.getLinkmanAddress();
        if (linkmanAddress != null) {
            stmt.bindString(2, linkmanAddress);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public AddressBookListBean readEntity(Cursor cursor, int offset) {
        AddressBookListBean entity = new AddressBookListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nickName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // linkmanAddress
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AddressBookListBean entity, int offset) {
        entity.setNickName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLinkmanAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRemark(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AddressBookListBean entity, long rowId) {
        return entity.getLinkmanAddress();
    }
    
    @Override
    public String getKey(AddressBookListBean entity) {
        if(entity != null) {
            return entity.getLinkmanAddress();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AddressBookListBean entity) {
        return entity.getLinkmanAddress() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
