package com.bupocket.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bupocket.model.NodeBuildModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NODE_BUILD_MODEL".
*/
public class NodeBuildModelDao extends AbstractDao<NodeBuildModel, String> {

    public static final String TABLENAME = "NODE_BUILD_MODEL";

    /**
     * Properties of entity NodeBuildModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NodeId = new Property(0, String.class, "nodeId", true, "NODE_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property PerAmount = new Property(2, String.class, "perAmount", false, "PER_AMOUNT");
        public final static Property Deposit = new Property(3, String.class, "deposit", false, "DEPOSIT");
        public final static Property TotalCopies = new Property(4, int.class, "totalCopies", false, "TOTAL_COPIES");
        public final static Property LeftCopies = new Property(5, int.class, "leftCopies", false, "LEFT_COPIES");
        public final static Property RewardRate = new Property(6, String.class, "rewardRate", false, "REWARD_RATE");
        public final static Property TotalAmount = new Property(7, String.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property CobuildCopies = new Property(8, int.class, "cobuildCopies", false, "COBUILD_COPIES");
    }


    public NodeBuildModelDao(DaoConfig config) {
        super(config);
    }
    
    public NodeBuildModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NODE_BUILD_MODEL\" (" + //
                "\"NODE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: nodeId
                "\"TITLE\" TEXT," + // 1: title
                "\"PER_AMOUNT\" TEXT," + // 2: perAmount
                "\"DEPOSIT\" TEXT," + // 3: deposit
                "\"TOTAL_COPIES\" INTEGER NOT NULL ," + // 4: totalCopies
                "\"LEFT_COPIES\" INTEGER NOT NULL ," + // 5: leftCopies
                "\"REWARD_RATE\" TEXT," + // 6: rewardRate
                "\"TOTAL_AMOUNT\" TEXT," + // 7: totalAmount
                "\"COBUILD_COPIES\" INTEGER NOT NULL );"); // 8: cobuildCopies
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NODE_BUILD_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NodeBuildModel entity) {
        stmt.clearBindings();
 
        String nodeId = entity.getNodeId();
        if (nodeId != null) {
            stmt.bindString(1, nodeId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String perAmount = entity.getPerAmount();
        if (perAmount != null) {
            stmt.bindString(3, perAmount);
        }
 
        String deposit = entity.getDeposit();
        if (deposit != null) {
            stmt.bindString(4, deposit);
        }
        stmt.bindLong(5, entity.getTotalCopies());
        stmt.bindLong(6, entity.getLeftCopies());
 
        String rewardRate = entity.getRewardRate();
        if (rewardRate != null) {
            stmt.bindString(7, rewardRate);
        }
 
        String totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindString(8, totalAmount);
        }
        stmt.bindLong(9, entity.getCobuildCopies());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NodeBuildModel entity) {
        stmt.clearBindings();
 
        String nodeId = entity.getNodeId();
        if (nodeId != null) {
            stmt.bindString(1, nodeId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String perAmount = entity.getPerAmount();
        if (perAmount != null) {
            stmt.bindString(3, perAmount);
        }
 
        String deposit = entity.getDeposit();
        if (deposit != null) {
            stmt.bindString(4, deposit);
        }
        stmt.bindLong(5, entity.getTotalCopies());
        stmt.bindLong(6, entity.getLeftCopies());
 
        String rewardRate = entity.getRewardRate();
        if (rewardRate != null) {
            stmt.bindString(7, rewardRate);
        }
 
        String totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindString(8, totalAmount);
        }
        stmt.bindLong(9, entity.getCobuildCopies());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NodeBuildModel readEntity(Cursor cursor, int offset) {
        NodeBuildModel entity = new NodeBuildModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nodeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // perAmount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deposit
            cursor.getInt(offset + 4), // totalCopies
            cursor.getInt(offset + 5), // leftCopies
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // rewardRate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // totalAmount
            cursor.getInt(offset + 8) // cobuildCopies
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NodeBuildModel entity, int offset) {
        entity.setNodeId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPerAmount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeposit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalCopies(cursor.getInt(offset + 4));
        entity.setLeftCopies(cursor.getInt(offset + 5));
        entity.setRewardRate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTotalAmount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCobuildCopies(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NodeBuildModel entity, long rowId) {
        return entity.getNodeId();
    }
    
    @Override
    public String getKey(NodeBuildModel entity) {
        if(entity != null) {
            return entity.getNodeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NodeBuildModel entity) {
        return entity.getNodeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
